/mnt/vault1/rsunketa/OpenFPGA/build/yosys/bin/yosys yosys.ys

 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.41+101 (git sha1 c71262f66, g++ 11.4.0-1ubuntu1~22.04 -fPIC -Os)

-- Executing script file `yosys.ys' --

1. Executing Verilog-2005 frontend: ./benchmark/noc_bench.v
Parsing Verilog input from `./benchmark/noc_bench.v' to AST representation.
Warning: Literal has a width of 2 bit, but value requires 8 bit. (./benchmark/noc_bench.v:446)
Warning: Literal has a width of 2 bit, but value requires 8 bit. (./benchmark/noc_bench.v:521)
Warning: Literal has a width of 2 bit, but value requires 8 bit. (./benchmark/noc_bench.v:591)
Warning: Literal has a width of 2 bit, but value requires 8 bit. (./benchmark/noc_bench.v:661)
Warning: Literal has a width of 2 bit, but value requires 8 bit. (./benchmark/noc_bench.v:731)
Warning: Literal has a width of 2 bit, but value requires 8 bit. (./benchmark/noc_bench.v:801)
Warning: Literal has a width of 2 bit, but value requires 8 bit. (./benchmark/noc_bench.v:871)
Warning: Literal has a width of 2 bit, but value requires 8 bit. (./benchmark/noc_bench.v:941)
Warning: Literal has a width of 2 bit, but value requires 8 bit. (./benchmark/noc_bench.v:1011)
Generating RTLIL representation for module `\noc'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /mnt/vault1/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router_wrap.v
Parsing Verilog input from `/mnt/vault1/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router_wrap.v' to AST representation.
Generating RTLIL representation for module `\router'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \noc

3.2. Analyzing design hierarchy..
Top module:  \noc
Removed 0 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

4.9. Executing PROC_DFF pass (convert process syncs to FFs).

4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module noc.

5. Executing TECHMAP pass (map to technology primitives).

5.1. Executing Verilog-2005 frontend: /mnt/vault1/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/router2router_slice.v
Parsing Verilog input from `/mnt/vault1/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/router2router_slice.v' to AST representation.
Generating RTLIL representation for module `\router'.
Successfully finished Verilog frontend.

5.2. Continuing TECHMAP pass.
Using template router for cells of type router.
No more expansions possible.
<suppressed ~49 debug messages>

6. Executing TECHMAP pass (map to technology primitives).

6.1. Executing Verilog-2005 frontend: /mnt/vault1/rsunketa/OpenFPGA/build/yosys/bin/../share/yosys/adff2dff.v
Parsing Verilog input from `/mnt/vault1/rsunketa/OpenFPGA/build/yosys/bin/../share/yosys/adff2dff.v' to AST representation.
Generating RTLIL representation for module `\adff2dff'.
Successfully finished Verilog frontend.

6.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

7. Executing FLATTEN pass (flatten design).

8. Executing OPT_EXPR pass (perform const folding).
Optimizing module noc.

9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \noc..
Removed 0 unused cells and 2533 unused wires.
<suppressed ~1 debug messages>

10. Executing CHECK pass (checking for obvious problems).
Checking module noc...
Found and reported 0 problems.

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module noc.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\noc'.
Removed a total of 0 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \noc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \noc.
Performed a total of 0 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\noc'.
Removed a total of 0 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \noc..

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module noc.

11.9. Finished OPT passes. (There is nothing left to do.)

12. Executing FSM pass (extract and optimize FSM).

12.1. Executing FSM_DETECT pass (finding FSMs in design).

12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \noc..

12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

13. Executing OPT pass (performing simple optimizations).

13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module noc.

13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\noc'.
Removed a total of 0 cells.

13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \noc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \noc.
Performed a total of 0 changes.

13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\noc'.
Removed a total of 0 cells.

13.6. Executing OPT_DFF pass (perform DFF optimizations).

13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \noc..

13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module noc.

13.9. Finished OPT passes. (There is nothing left to do.)

14. Executing WREDUCE pass (reducing word size of cells).

15. Executing PEEPOPT pass (run peephole optimizers).

16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \noc..

17. Executing OPT pass (performing simple optimizations).

17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module noc.

17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\noc'.
Removed a total of 0 cells.

17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \noc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \noc.
Performed a total of 0 changes.

17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\noc'.
Removed a total of 0 cells.

17.6. Executing OPT_DFF pass (perform DFF optimizations).

17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \noc..

17.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module noc.

17.9. Finished OPT passes. (There is nothing left to do.)

18. Executing MEMORY pass.

18.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

18.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

18.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

18.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

18.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

18.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \noc..

18.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

18.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

18.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \noc..

18.10. Executing MEMORY_COLLECT pass (generating $mem cells).

19. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \noc..

20. Executing OPT pass (performing simple optimizations).

20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module noc.

20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\noc'.
Removed a total of 0 cells.

20.3. Executing OPT_DFF pass (perform DFF optimizations).

20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \noc..

20.5. Finished fast OPT passes.

21. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module noc.

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\noc'.
Removed a total of 0 cells.

22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \noc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \noc.
Performed a total of 0 changes.

22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\noc'.
Removed a total of 0 cells.

22.6. Executing OPT_SHARE pass.

22.7. Executing OPT_DFF pass (perform DFF optimizations).

22.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \noc..

22.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module noc.

22.10. Finished OPT passes. (There is nothing left to do.)

23. Executing TECHMAP pass (map to technology primitives).

23.1. Executing Verilog-2005 frontend: /mnt/vault1/rsunketa/OpenFPGA/build/yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/mnt/vault1/rsunketa/OpenFPGA/build/yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

23.2. Continuing TECHMAP pass.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=2:Y_WIDTH=2:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=2:Y_WIDTH=2:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=2:Y_WIDTH=2:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$7e708ae28ab761f11d0fb59d3ffc72f6a4baf5d9\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~228 debug messages>

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module noc.
<suppressed ~6 debug messages>

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\noc'.
Removed a total of 0 cells.

24.3. Executing OPT_DFF pass (perform DFF optimizations).

24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \noc..
Removed 5 unused cells and 30 unused wires.
<suppressed ~6 debug messages>

24.5. Finished fast OPT passes.

25. Executing ABC pass (technology mapping using ABC).

25.1. Extracting gate netlist of module `\noc' to `<abc-temp-dir>/input.blif'..
Extracted 4 gates and 8 wires to a netlist network with 4 inputs and 2 outputs.

25.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

25.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        2
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        2
Removing temp directory.

26. Executing SYNTH pass.

26.1. Executing HIERARCHY pass (managing design hierarchy).

26.1.1. Analyzing design hierarchy..
Top module:  \noc

26.1.2. Analyzing design hierarchy..
Top module:  \noc
Removed 0 unused modules.

26.2. Printing statistics.

=== noc ===

   Number of wires:                310
   Number of wire bits:           2286
   Number of public wires:         179
   Number of public wire bits:    1667
   Number of ports:                 59
   Number of port bits:            683
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     $lut                            2
     router                          9

26.3. Executing CHECK pass (checking for obvious problems).
Checking module noc...
Found and reported 0 problems.

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \noc..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

28. Executing BLIF backend.

Warnings: 9 unique messages, 9 total
End of script. Logfile hash: 1f1fe5cb41, CPU: user 0.15s system 0.01s, MEM: 24.50 MB peak
Yosys 0.41+101 (git sha1 c71262f66, g++ 11.4.0-1ubuntu1~22.04 -fPIC -Os)
Time spent: 28% 1x abc (0 sec), 22% 3x techmap (0 sec), ...
0