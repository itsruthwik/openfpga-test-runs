/home/rsunketa/OpenFPGA/build/yosys/bin/yosys yosys_rewrite_0.ys

 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.41+101 (git sha1 c71262f66, g++ 13.3.1 -fPIC -Os)

-- Executing script file `yosys_rewrite_0.ys' --

1. Executing Verilog-2005 frontend: ./benchmark/mesh_bench.v
Parsing Verilog input from `./benchmark/mesh_bench.v' to AST representation.
Generating RTLIL representation for module `\mesh_bench'.
./benchmark/mesh_bench.v:95: Warning: Identifier `\oack_1_rtr0' is implicitly declared.
./benchmark/mesh_bench.v:96: Warning: Identifier `\ordy_1_rtr0' is implicitly declared.
./benchmark/mesh_bench.v:97: Warning: Identifier `\olck_1_rtr0' is implicitly declared.
./benchmark/mesh_bench.v:110: Warning: Identifier `\odata_1_rtr0' is implicitly declared.
./benchmark/mesh_bench.v:111: Warning: Identifier `\ovalid_1_rtr0' is implicitly declared.
./benchmark/mesh_bench.v:112: Warning: Identifier `\ovch_1_rtr0' is implicitly declared.
./benchmark/mesh_bench.v:125: Warning: Identifier `\idata_1_rtr0' is implicitly declared.
./benchmark/mesh_bench.v:126: Warning: Identifier `\ivalid_1_rtr0' is implicitly declared.
./benchmark/mesh_bench.v:127: Warning: Identifier `\ivch_1_rtr0' is implicitly declared.
./benchmark/mesh_bench.v:139: Warning: Identifier `\iack_1_rtr0' is implicitly declared.
./benchmark/mesh_bench.v:140: Warning: Identifier `\ilck_1_rtr0' is implicitly declared.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v
Parsing Verilog input from `/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v' to AST representation.
Generating RTLIL representation for module `\router'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \mesh_bench

3.2. Analyzing design hierarchy..
Top module:  \mesh_bench
Removed 0 unused modules.
Warning: Resizing cell port mesh_bench.rtr0.ILCK_1 from 1 bits to 2 bits.
Warning: Resizing cell port mesh_bench.rtr0.IACK_1 from 1 bits to 2 bits.
Warning: Resizing cell port mesh_bench.rtr0.IDATA_1 from 1 bits to 35 bits.
Warning: Resizing cell port mesh_bench.rtr0.ODATA_1 from 1 bits to 35 bits.
Warning: Resizing cell port mesh_bench.rtr0.OLCK_1 from 1 bits to 2 bits.
Warning: Resizing cell port mesh_bench.rtr0.ORDY_1 from 1 bits to 2 bits.
Warning: Resizing cell port mesh_bench.rtr0.OACK_1 from 1 bits to 2 bits.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 30 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.

4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

4.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\router.\OACK_1' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$6' with positive edge clock.
Creating register for signal `\router.\ORDY_1' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$7' with positive edge clock.
Creating register for signal `\router.\OLCK_1' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$8' with positive edge clock.
Creating register for signal `\router.\OACK_4' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$9' with positive edge clock.
Creating register for signal `\router.\ORDY_4' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$10' with positive edge clock.
Creating register for signal `\router.\OLCK_4' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$11' with positive edge clock.
Creating register for signal `\router.\ODATA_1' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$12' with positive edge clock.
Creating register for signal `\router.\OVALID_1' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$13' with positive edge clock.
Creating register for signal `\router.\OVCH_1' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$14' with positive edge clock.
Creating register for signal `\router.\ODATA_4' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$15' with positive edge clock.
Creating register for signal `\router.\OVALID_4' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$16' with positive edge clock.
Creating register for signal `\router.\OVCH_4' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$17' with positive edge clock.
Creating register for signal `\router.\OACK_3' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$18' with positive edge clock.
Creating register for signal `\router.\ORDY_3' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$19' with positive edge clock.
Creating register for signal `\router.\OLCK_3' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$20' with positive edge clock.
Creating register for signal `\router.\ODATA_3' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$21' with positive edge clock.
Creating register for signal `\router.\OVALID_3' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$22' with positive edge clock.
Creating register for signal `\router.\OVCH_3' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$23' with positive edge clock.
Creating register for signal `\router.\OACK_0' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$24' with positive edge clock.
Creating register for signal `\router.\ORDY_0' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$25' with positive edge clock.
Creating register for signal `\router.\OLCK_0' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$26' with positive edge clock.
Creating register for signal `\router.\OACK_2' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$27' with positive edge clock.
Creating register for signal `\router.\ORDY_2' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$28' with positive edge clock.
Creating register for signal `\router.\OLCK_2' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$29' with positive edge clock.
Creating register for signal `\router.\ODATA_0' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$30' with positive edge clock.
Creating register for signal `\router.\OVALID_0' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$31' with positive edge clock.
Creating register for signal `\router.\OVCH_0' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$32' with positive edge clock.
Creating register for signal `\router.\ODATA_2' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$33' with positive edge clock.
Creating register for signal `\router.\OVALID_2' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$34' with positive edge clock.
Creating register for signal `\router.\OVCH_2' using process `\router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
  created $dff cell `$procdff$35' with positive edge clock.

4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `router.$proc$/home/rsunketa/OpenFPGA/openfpga-test-runs/dummy-router/verilog-files/dummy_router3.v:67$1'.
Cleaned up 0 empty switches.

4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module mesh_bench.

5. Executing TECHMAP pass (map to technology primitives).

5.1. Executing Verilog-2005 frontend: /home/rsunketa/OpenFPGA/build/yosys/bin/../share/yosys/adff2dff.v
Parsing Verilog input from `/home/rsunketa/OpenFPGA/build/yosys/bin/../share/yosys/adff2dff.v' to AST representation.
Generating RTLIL representation for module `\adff2dff'.
Successfully finished Verilog frontend.

5.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

6. Executing FLATTEN pass (flatten design).
Deleting now unused module router.
<suppressed ~2 debug messages>

7. Executing OPT_EXPR pass (perform const folding).
Optimizing module mesh_bench.

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mesh_bench..
Removed 48 unused cells and 111 unused wires.
<suppressed ~96 debug messages>

9. Executing CHECK pass (checking for obvious problems).
Checking module mesh_bench...
Found and reported 0 problems.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mesh_bench.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mesh_bench'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mesh_bench..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mesh_bench.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mesh_bench'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 1-bit at position 0 on $flatten\rtr0.$procdff$10 ($dff) from module mesh_bench.
Setting constant 0-bit at position 1 on $flatten\rtr0.$procdff$10 ($dff) from module mesh_bench.

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mesh_bench..
Removed 0 unused cells and 31 unused wires.
<suppressed ~31 debug messages>

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mesh_bench.

10.9. Rerunning OPT passes. (Maybe there is more to do..)

10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mesh_bench..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mesh_bench.
Performed a total of 0 changes.

10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mesh_bench'.
Removed a total of 0 cells.

10.13. Executing OPT_DFF pass (perform DFF optimizations).

10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mesh_bench..

10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mesh_bench.

10.16. Finished OPT passes. (There is nothing left to do.)

11. Executing FSM pass (extract and optimize FSM).

11.1. Executing FSM_DETECT pass (finding FSMs in design).

11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mesh_bench..

11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

12. Executing OPT pass (performing simple optimizations).

12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mesh_bench.

12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mesh_bench'.
Removed a total of 0 cells.

12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mesh_bench..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mesh_bench.
Performed a total of 0 changes.

12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mesh_bench'.
Removed a total of 0 cells.

12.6. Executing OPT_DFF pass (perform DFF optimizations).

12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mesh_bench..

12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mesh_bench.

12.9. Finished OPT passes. (There is nothing left to do.)

13. Executing WREDUCE pass (reducing word size of cells).

14. Executing PEEPOPT pass (run peephole optimizers).

15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mesh_bench..

16. Executing OPT pass (performing simple optimizations).

16.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mesh_bench.

16.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mesh_bench'.
Removed a total of 0 cells.

16.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mesh_bench..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

16.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mesh_bench.
Performed a total of 0 changes.

16.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mesh_bench'.
Removed a total of 0 cells.

16.6. Executing OPT_DFF pass (perform DFF optimizations).

16.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mesh_bench..

16.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mesh_bench.

16.9. Finished OPT passes. (There is nothing left to do.)

17. Executing MEMORY pass.

17.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

17.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

17.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

17.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

17.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

17.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mesh_bench..

17.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

17.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

17.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mesh_bench..

17.10. Executing MEMORY_COLLECT pass (generating $mem cells).

18. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mesh_bench..

19. Executing OPT pass (performing simple optimizations).

19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mesh_bench.
<suppressed ~16 debug messages>

19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mesh_bench'.
Removed a total of 0 cells.

19.3. Executing OPT_DFF pass (perform DFF optimizations).

19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mesh_bench..

19.5. Finished fast OPT passes.

20. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

21. Executing OPT pass (performing simple optimizations).

21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mesh_bench.

21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mesh_bench'.
Removed a total of 0 cells.

21.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mesh_bench..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

21.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mesh_bench.
Performed a total of 0 changes.

21.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mesh_bench'.
Removed a total of 0 cells.

21.6. Executing OPT_SHARE pass.

21.7. Executing OPT_DFF pass (perform DFF optimizations).

21.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mesh_bench..

21.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module mesh_bench.

21.10. Finished OPT passes. (There is nothing left to do.)

22. Executing TECHMAP pass (map to technology primitives).

22.1. Executing Verilog-2005 frontend: /home/rsunketa/OpenFPGA/build/yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/rsunketa/OpenFPGA/build/yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

22.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dff.
No more expansions possible.
<suppressed ~83 debug messages>

23. Executing OPT pass (performing simple optimizations).

23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mesh_bench.

23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mesh_bench'.
Removed a total of 0 cells.

23.3. Executing OPT_DFF pass (perform DFF optimizations).

23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mesh_bench..

23.5. Finished fast OPT passes.

24. Executing ABC pass (technology mapping using ABC).

24.1. Extracting gate netlist of module `\mesh_bench' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

25. Executing SYNTH pass.

25.1. Executing HIERARCHY pass (managing design hierarchy).

25.1.1. Analyzing design hierarchy..
Top module:  \mesh_bench

25.1.2. Analyzing design hierarchy..
Top module:  \mesh_bench
Removed 0 unused modules.

25.2. Printing statistics.

=== mesh_bench ===

   Number of wires:                119
   Number of wire bits:            920
   Number of public wires:         119
   Number of public wire bits:     920
   Number of ports:                 24
   Number of port bits:            170
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 84
     $_DFF_P_                       82
     $scopeinfo                      2

25.3. Executing CHECK pass (checking for obvious problems).
Checking module mesh_bench...
Found and reported 0 problems.

26. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mesh_bench..
Removed 2 unused cells and 95 unused wires.
<suppressed ~97 debug messages>

27. Executing Verilog backend.

27.1. Executing BMUXMAP pass.

27.2. Executing DEMUXMAP pass.
Dumping module `\mesh_bench'.

28. Executing BLIF backend.

Warnings: 18 unique messages, 18 total
End of script. Logfile hash: 36fd38907c, CPU: user 0.05s system 0.00s, MEM: 25.41 MB peak
Yosys 0.41+101 (git sha1 c71262f66, g++ 13.3.1 -fPIC -Os)
Time spent: 30% 14x opt_clean (0 sec), 20% 6x read_verilog (0 sec), ...
0