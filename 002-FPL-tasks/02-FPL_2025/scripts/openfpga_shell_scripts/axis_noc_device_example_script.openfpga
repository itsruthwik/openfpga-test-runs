# openfpga script for the NoC flow

vpr ${VPR_ARCH_FILE} ${VPR_TESTBENCH_BLIF} \
    --device ${OPENFPGA_VPR_DEVICE_LAYOUT} \
    --constant_net_method route  --echo_file on  \
    --noc on --noc_flows_file /mnt/vault1/rsunketa/OpenFPGA/openfpga-test-runs/FPL_2025/benchmarks/synthetic_mlp_benchmarks/simple_four_noc_1D_chain_axis.flows
#--fix_clusters /mnt/vault1/rsunketa/OpenFPGA/openfpga-test-runs/nocgen-router/benchmark-files/router_2_bench.place 

#ext_exec --command "python3 /mnt/vault1/rsunketa/OpenFPGA/openfpga-test-runs/scripts/noc_bitstream_generator.py \
#    --vpr_arch ${VPR_ARCH_FILE} \
#    --vpr_tile router_wrap_tile \
#    --bench_top ${TOP_MODULE} \
#    --address_port router_address \
#    --run_dir ./ "

# Read OpenFPGA architecture definition
read_openfpga_arch -f ${OPENFPGA_ARCH_FILE}

# Read OpenFPGA simulation settings
read_openfpga_simulation_setting -f ${OPENFPGA_SIM_SETTING_FILE}

# Annotate the OpenFPGA architecture to VPR data base
# to debug use --verbose options
link_openfpga_arch --sort_gsb_chan_node_in_edges # --verbose

# Check and correct any naming conflicts in the BLIF netlist
check_netlist_naming_conflict --fix --report ./netlist_renaming.xml

# Apply fix-up to Look-Up Table truth tables based on packing results
lut_truth_table_fixup

# Build the module graph
#  - Enabled compression on routing architecture modules
#  - Enable pin duplication on grid modules
build_fabric --compress_routing  # --verbose

# Write the fabric hierarchy of module graph to a file
# This is used by hierarchical PnR flows
write_fabric_hierarchy --file ./fabric_hierarchy.txt

# Repack the netlist to physical pbs
# This must be done before bitstream generator and testbench generation
# Strongly recommend it is done after all the fix-up have been applied
repack #--verbose

# Build the bitstream
#  - Output the fabric-independent bitstream to a file
#build_architecture_bitstream --verbose --write_file fabric_independent_bitstream.xml

# Build fabric-dependent bitstream
#build_fabric_bitstream --verbose #

# Write fabric-dependent bitstream
#write_fabric_bitstream --file fabric_bitstream.bit --format plain_text

# Write the Verilog netlist for FPGA fabric
#  - Enable the use of explicit port mapping in Verilog netlist
write_fabric_verilog --file ./SRC --explicit_port_mapping --include_timing --print_user_defined_template --verbose --constant_undriven_inputs bus0

# Generate a bus group file by calling an external python script
#ext_exec --command "python3 ../../../../config/bus_group_gen.py --task ../../../../config/noc_bus_group_task.yaml"

# Write the Verilog testbench for FPGA fabric
#  - We suggest the use of same output directory as fabric Verilog netlists
#  - Must specify the reference benchmark file if you want to output any testbenches
#  - Enable top-level testbench which is a full verification including programming circuit and core logic of FPGA
#  - Enable pre-configured top-level testbench which is a fast verification skipping programming phase
#  - Simulation ini file is optional and is needed only when you need to interface different HDL simulators using openfpga flow-run scripts
#write_full_testbench --file ./SRC --reference_benchmark_file_path ${REFERENCE_VERILOG_TESTBENCH} --include_signal_init --bitstream fabric_bitstream.bit

#write_full_testbench --file ./SRC --reference_benchmark_file_path ${REFERENCE_VERILOG_TESTBENCH} --include_signal_init --explicit_port_mapping --bitstream fabric_bitstream.bit ${OPENFPGA_FAST_CONFIGURATION}


#write_preconfigured_fabric_wrapper --embed_bitstream iverilog --file ./SRC 
# write_preconfigured_testbench --file ./SRC --reference_benchmark_file_path ${REFERENCE_VERILOG_TESTBENCH} 
#write_preconfigured_testbench --file ./SRC --reference_benchmark_file_path ${VERILOG_FILES}

# Write the SDC files for PnR backend
#  - Turn on every options here
#write_pnr_sdc --file ./SDC
#
## Write SDC to disable timing for configure ports
#write_sdc_disable_timing_configure_ports --file ./SDC/disable_configure_ports.sdc
#
## Write the SDC to run timing analysis for a mapped FPGA fabric
#write_analysis_sdc --file ./SDC_analysis

# Finish and exit OpenFPGA
exit

# Note :
# To run verification at the end of the flow maintain source in ./SRC directory
